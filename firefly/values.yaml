replicaCount: 1
deploymentStrategyType: RollingUpdate

image:
  registry: "docker.io"
  repository: "fireflyiii/core"
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

persistence:
  # -- If you set this to false, uploaded attachments are not stored persistently and will be lost with every restart of the pod
  enabled: true
  storageClassName: "local-persistent"
  accessModes: ReadWriteOnce
  storage: 1Gi
  # -- If you want to use an existing claim, set it here
  existingClaim: "firefly-data-pv"

# -- Environment variables for Firefly III. See docs at: https://github.com/firefly-iii/firefly-iii/blob/main/.env.example
config:
  # -- Set this to the name of a secret to load environment variables from. If defined, values in the secret will override values in config.env
  existingSecret: "firefly-credentials"

  # -- Directly defined environment variables. Use this for non-secret configuration values.
  env:
    DB_HOST: "postgersql-hl.postgresql.svc.cluster.local"
    # DB_CONNECTION: pgsql
    # DB_PORT: "5432"
    DB_DATABASE: firefly
    DB_USERNAME: firefly
    DEFAULT_LANGUAGE: "en_US"
    DEFAULT_LOCALE: "equal"
    TZ: "Europe/Prague"
    TRUSTED_PROXIES: "**"

# -- A cronjob for [recurring Firefly III tasks](https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/).
cronjob:
  # -- Set to true to enable the CronJob. Note that you need to specify either cronjob.auth.existingSecret or cronjob.auth.token for it to actually be deployed.
  enabled: false
  #
  # # -- Authorization for the CronJob. See https://docs.firefly-iii.org/firefly-iii/advanced-installation/cron/#request-a-page-over-the-web
  # auth:
  #   # -- The name of a secret containing a data.token field with the cronjob token
  #   existingSecret: ""
  #
  #   # -- The name of the key in the existing secret to get the cronjob token from
  #   secretKey: "token"
  #
  #   # -- The token in plain text
  #   token: ""
  #
  # # -- Annotations for the CronJob
  # annotations: {}
  #
  # # -- When to run the CronJob. Defaults to 03:00 as this is when Firefly III executes regular tasks.
  # schedule: "0 3 * * *"
  #
  # # -- How many pods to keep around for successful jobs
  # successfulJobsHistoryLimit: 3
  #
  # # -- How many pods to keep around for failed jobs
  # failedJobsHistoryLimit: 1
  #
  # # -- How to treat failed jobs
  # restartPolicy: OnFailure
  #
  # image:
  #   registry: docker.io
  #   repository: curlimages/curl
  #   pullPolicy: IfNotPresent
  #   tag: 8.12.0
  #
  # imagePullSecrets: []
  #
  # podAnnotations: {}
  #
  # securityContext: {}
  #
  # podSecurityContext: {}
  #
  # resources: {}
  #
  # nodeSelector: {}
  #
  # tolerations: []
  #
  # affinity: {}

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - firefly.homelab
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}

# Here, you can specify custom volumes to use.
extraVolumes: []
  # - name: db-tls-firefly
  #   secret:
  #     secretName: db-tls-firefly
  #     defaultMode: 0440

# And here, your custom volume mounts.
extraVolumeMounts: []
  # - name: db-tls-firefly
  #   mountPath: /db-cert
  #   readOnly: true

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 1
startupProbe:
  httpGet:
    path: /health
    port: http
  # Give the app 30 x 10 = 300s to startup
  failureThreshold: 30
  periodSeconds: 10
