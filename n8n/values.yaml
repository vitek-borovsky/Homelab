# yaml-language-server: $schema=values.schema.json
# Default values for n8n.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: n8nio/n8n
  # -- This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# -- This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# -- This will set the deployment strategy more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
strategy:
  type: "RollingUpdate"
  rollingUpdate:
    maxSurge: "25%"
    maxUnavailable: "25%"

# -- This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- This is for setting Kubernetes Annotations to a Pod. For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- This is for setting Kubernetes Labels to a Pod. For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# -- This is for setting Security Context to a Pod. For more information checkout: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"

# -- This is for setting Security Context to a Container. For more information checkout: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  privileged: false
  runAsUser: 1000
  runAsGroup: 1000

# -- This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # -- This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # -- This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  # -- Default Service name
  name: http
  # -- Additional service annotations
  annotations: {}

# -- n8n log configurations
log:
  # -- The log output level. The available options are (from lowest to highest level) are error, warn, info, and debug. The default value is info. You can learn more about these options [here](https://docs.n8n.io/hosting/logging-monitoring/logging/#log-levels).
  level: info
  # -- Where to output logs to. Options are: `console` or `file` or both.
  output:
    - console

  # -- Scopes to filter logs by. Nothing is filtered by default. Supported log scopes: concurrency, external-secrets, license, multi-main-setup, pubsub, redis, scaling, waiting-executions
  scopes: []
    # - concurrency
    # - external-secrets
    # - license
    # - multi-main-setup
    # - pubsub
    # - redis
    # - scaling
    # - waiting-executions

  file:
    # -- Location of the log files inside `~/.n8n`. Only for `file` log output.
    location: "logs/n8n.log"
    # -- The maximum size (in MB) for each log file. By default, n8n uses 16 MB.
    maxsize: 16
    # -- Max number of log files to keep, or max number of days to keep logs for. Once the limit is reached, the oldest log files will be rotated out. If using days, append a `d` suffix. Only for `file` log output.
    maxcount: "100"

binaryData:
  # -- Available modes of binary data storage. If not set, the default mode will be used. For more information, see https://docs.n8n.io/hosting/configuration/environment-variables/binary-data/
  availableModes: []
  # -- The default binary data mode. default keeps binary data in memory. Set to filesystem to use the filesystem, or s3 to AWS S3. Note that binary data pruning operates on the active binary data mode. For example, if your instance stored data in S3, and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in future. Valid values are 'default' | 'filesystem' | 's3'. For more information, see https://docs.n8n.io/hosting/configuration/environment-variables/binary-data/
  mode: "default"
  # -- Path for binary data storage in "filesystem" mode. If not set, the default path will be used. For more information, see https://docs.n8n.io/hosting/configuration/environment-variables/binary-data/
  localStoragePath: ""

# -- n8n database configurations
db:
  # -- Prefix to use for table names.
  tablePrefix: ""
  # -- Type of database to use. Valid values 'sqlite' | 'postgresdb'
  type: sqlite

  logging:
    # -- Whether database logging is enabled.
    enabled: false
    # -- Database logging level. Requires `maxQueryExecutionTime` to be higher than `0`. Valid values 'query' | 'error' | 'schema' | 'warn' | 'info' | 'log' | 'all'
    options: error
    # -- Only queries that exceed this time (ms) will be logged. Set `0` to disable.
    maxQueryExecutionTime: 0

  sqlite:
    # -- SQLite database file name
    database: "database.sqlite"
    # -- SQLite database pool size. Set to `0` to disable pooling.
    poolSize: 0
    # -- Runs VACUUM operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and increases start-up time.
    vacuum: false

sentry:
  # -- Whether sentry is enabled.
  enabled: false
  # -- Sentry DSN for backend.
  backendDsn: ""
  # -- Sentry DSN for frontend.
  frontendDsn: ""
  # -- Sentry DSN for external task runners.
  externalTaskRunnersDsn: ""

diagnostics:
  # -- Whether diagnostics are enabled.
  enabled: false

  # -- Diagnostics config for frontend.
  frontendConfig: "1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io"
  # -- Diagnostics config for backend.
  backendConfig: "1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io"

  postHog:
    # -- API key for PostHog.
    apiKey: "phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo"
    # -- API host for PostHog.
    apiHost: "https://ph.n8n.io"

versionNotifications:
  # -- Whether to request notifications about new n8n versions
  enabled: false
  # -- Endpoint to retrieve n8n version information from
  endpoint: "https://api.n8n.io/api/versions/"
  # -- URL for versions panel to page instructing user on how to update n8n instance
  infoUrl: "https://docs.n8n.io/hosting/installation/updating/"

api:
  # -- Whether to enable the Public API
  enabled: true
  # -- Path segment for the Public API
  path: api
  # -- Whether to enable the Swagger UI for the Public API
  swagger:
    enabled: true

# -- n8n enterprise license configurations
license:
  enabled: false

# -- Main node configurations
main:
  # -- Number of main nodes. Only enterprise license users can have one leader main node and mutiple follower main nodes.
  count: 1

  # -- Whether to enable the PodDisruptionBudget for the main pod.
  pdb:
    # -- Whether to enable the PodDisruptionBudget
    enabled: true
    # -- Minimum number of available replicas
    minAvailable: 1
    # -- Maximum number of unavailable replicas
    maxUnavailable: null

  # -- This block is for setting up the resource management for the main pod more information can be found here: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 1Gi

  # -- Extra environment variables
  extraEnvVars:
    N8N_SECURE_COOKIE: "false"

  # -- Extra secrets for environment variables
  extraSecretNamesForEnvFrom: []

  # -- Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# -- Worker node configurations
worker:
  # -- Use `regular` to use main node as executer, or use `queue` to have worker nodes
  mode: regular

  # -- number of concurrency for each worker
  concurrency: 10

  # -- Static number of workers. If allNodes or autoscaling is enabled, this value will be ignored.
  count: 2

  # -- If true, all k8s nodes will deploy exatly one worker pod
  allNodes: false

  # -- If true, the number of workers will be automatically scaled based on default metrics. On default, it will scale based on CPU and memory. For more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    # -- Whether autoscaling is enabled.
    enabled: false

    # -- The minimum number of replicas.
    minReplicas: 2

    # -- The maximum number of replicas.
    maxReplicas: 10

    # -- The metrics to use for autoscaling.
    metrics:
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

    # -- The behavior of the autoscaler.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      # scaleUp:
      #   stabilizationWindowSeconds: 0
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      #   - type: Pods
      #     value: 4
      #     periodSeconds: 15
      #   selectPolicy: Max

  # -- Whether to enable the PodDisruptionBudget for the worker pod
  pdb:
    # -- Whether to enable the PodDisruptionBudget
    enabled: true
    # -- Minimum number of available replicas
    minAvailable: 1
    # -- Maximum number of unavailable replicas
    maxUnavailable: null

  # -- This block is for setting up the resource management for the worker pod more information can be found here: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 1Gi

  # -- Extra environment variables
  extraEnvVars: {}

  # -- Extra secrets for environment variables
  extraSecretNamesForEnvFrom: []

  # -- Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# -- Webhook node configurations
webhook:
  # -- Use `regular` to use main node as webhook node, or use `queue` to have webhook nodes
  mode: regular

  # -- Webhook url together with http or https schema
  url: ""

  # -- Static number of webhooks. If allNodes or autoscaling is enabled, this value will be ignored.
  count: 2

  # -- If true, all k8s nodes will deploy exatly one webhook pod
  allNodes: false

  # -- If true, the number of webhooks will be automatically scaled based on default metrics. On default, it will scale based on CPU. Scale by requests can be done by setting a custom metric. For more information can be found here: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
  autoscaling:
    # -- Whether autoscaling is enabled.
    enabled: false

    # -- The minimum number of replicas.
    minReplicas: 2

    # -- The maximum number of replicas.
    maxReplicas: 10

    # -- The metrics to use for autoscaling.
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
      # - type: Pods
      #   pods:
      #     metric:
      #       name: packets-per-second
      #     target:
      #       type: AverageValue
      #       averageValue: 1k
      # - type: Object
      #   object:
      #     metric:
      #       name: requests-per-second
      #     describedObject:
      #       apiVersion: networking.k8s.io/v1
      #       kind: Ingress
      #       name: main-route
      #     target:
      #       type: Value
      #       value: 10k

    # -- The behavior of the autoscaler.
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      # scaleUp:
      #   stabilizationWindowSeconds: 0
      #   policies:
      #   - type: Percent
      #     value: 100
      #     periodSeconds: 15
      #   - type: Pods
      #     value: 4
      #     periodSeconds: 15
      #   selectPolicy: Max

  # -- Whether to enable the PodDisruptionBudget for the webhook pod
  pdb:
    # -- Whether to enable the PodDisruptionBudget
    enabled: true
    # -- Minimum number of available replicas
    minAvailable: 1
    # -- Maximum number of unavailable replicas
    maxUnavailable: null

  # -- This block is for setting up the resource management for the webhook pod more information can be found here: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 1Gi

  # -- Extra environment variables
  extraEnvVars: {}

  # -- Extra secrets for environment variables
  extraSecretNamesForEnvFrom: []

  # -- Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# -- Task runners mode. Please follow the documentation for more information: https://docs.n8n.io/hosting/configuration/task-runners/
taskRunners:
  # -- Use `internal` to use internal task runner, or use `external` to have external sidecar task runner. For more information please follow the documentation: https://docs.n8n.io/hosting/configuration/task-runners/#task-runner-modes
  mode: internal
  # -- The timeout for the task in seconds
  taskTimeout: 60
  # -- The heartbeat interval for the task in seconds
  taskHeartbeatInterval: 30
  # -- The maximum concurrency for the task
  maxConcurrency: 5

  # -- The address for the broker of the external task runner
  broker:
    # -- The address for the broker of the external task runner
    address: "127.0.0.1"
    # -- The port for the broker of the external task runner
    port: 5679

  # -- The configuration for the external task runner
  external:
    # -- The auth token for the main node
    mainNodeAuthToken: ""
    # -- The auth token for the worker node
    workerNodeAuthToken: ""
    # -- The auto shutdown timeout for the external task runner in seconds
    autoShutdownTimeout: 15
    # -- The port for the external task runner
    port: 5680
    # -- The node options for the external task runner
    nodeOptions:
      - "--max-semi-space-size=16"
      - "--max-old-space-size=300"

    # -- The resources for the external task runner
    resources:
      # -- The resources requests for the external task runner
      requests:
        # -- The CPU request for the external task runner
        cpu: 100m
        # -- The memory request for the external task runner
        memory: 32Mi
      # -- The limits for the external task runner
      limits:
        # -- The CPU limit for the external task runner
        cpu: 2000m
        # -- The memory limit for the external task runner
        memory: 512Mi

# -- The workflow history configuration
workflowHistory:
  # -- Whether to save workflow history versions
  enabled: true
  # -- Time (in hours) to keep workflow history versions for. To disable it, use -1 as a value
  pruneTime: 336

# -- If you install n8n first time, you can keep this empty and it will be auto generated and never change again. If you already have a encryption key generated before, please use it here.
encryptionKey: ""

# -- The name of an existing secret with encryption key. The secret must contain a key with the name N8N_ENCRYPTION_KEY.
existingEncryptionKeySecret: ""

# -- For instance, the Schedule node uses it to know at what time the workflow should start. Find you timezone from here: https://momentjs.com/timezone/
timezone: "Europe/Prague"

# -- A locale identifier, compatible with the Accept-Language header. n8n doesn't support regional identifiers, such as de-AT.
defaultLocale: en

# -- graceful shutdown timeout in seconds
gracefulShutdownTimeout: 30

# -- This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: n8n.homelab
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: n8n-tls
  #    hosts:
  #      - n8n.local

# -- The service monitor configuration. Please refer to the following link for more information: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api-reference/api.md
serviceMonitor:
  # -- When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # -- Set the namespace the ServiceMonitor should be deployed. If empty, the ServiceMonitor will be deployed in the same namespace as the n8n chart.
  namespace: ""
  # -- Set how frequently Prometheus should scrape
  interval: 30s
  # -- Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  labels:
    # -- default `kube prometheus stack` helm chart serviceMonitor selector label
    # Mostly it's your prometheus helm release name. Please find more information from here:
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/platform/troubleshooting.md#troubleshooting-servicemonitor-changes
    release: prometheus
  # -- Set timeout for scrape
  timeout: 10s
  # -- Set of labels to transfer on the Kubernetes Service onto the target.
  targetLabels: []

  # -- Set of rules to relabel your exist metric labels
  metricRelabelings: []
    # - sourceLabels: [prometheus_replica]
    #   regex: (.*)
    #   targetLabel: another_prometheus_replica
    #   action: replace
    # - regex: prometheus_replica
    #   action: labeldrop

  # -- The prefix for the metrics
  metricsPrefix: "n8n_"

  # -- Whether to include metrics
  include:
    # -- Whether to include default metrics
    defaultMetrics: true
    # -- Whether to include cache metrics
    cacheMetrics: false
    # -- Whether to include message event bus metrics
    messageEventBusMetrics: false
    # -- Whether to include workflow id label
    workflowIdLabel: false
    # -- Whether to include node type label
    nodeTypeLabel: false
    # -- Whether to include credential type label
    credentialTypeLabel: false
    # -- Whether to include api endpoints
    apiEndpoints: false
    # -- Whether to include api path label
    apiPathLabel: false
    # -- Whether to include api method label
    apiMethodLabel: false
    # -- Whether to include api status code label
    apiStatusCodeLabel: false
    # -- Whether to include queue metrics
    queueMetrics: false

# -- DEPRECATED: Use main, worker, and webhook blocks extraEnvVars fields instead. This field will be removed in a future release.
extraEnvVars: {}

# -- DEPRECATED: Use main, worker, and webhook blocks extraSecretNamesForEnvFrom fields instead. This field will be removed in a future release.
extraSecretNamesForEnvFrom: []

# -- DEPRECATED: Use main, worker, and webhook blocks resources fields instead. This field will be removed in a future release.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 1Gi

# -- This is to setup the liveness probe more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /healthz
    port: http

# -- This is to setup the readiness probe more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /healthz/readiness
    port: http

# -- DEPRECATED: Use main, worker, and webhook blocks volumes fields instead. This field will be removed in a future release.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- DEPRECATED: Use main, worker, and webhook blocks volumeMounts fields instead. This field will be removed in a future release.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- For more information checkout: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# -- For more information checkout: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# -- For more information checkout: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -- Bitnami Redis configuration
redis:
  enabled: false

# -- Bitnami PostgreSQL configuration
postgresql:
  enabled: false

# -- External PostgreSQL parameters
externalPostgresql:
  # -- External PostgreSQL server host
  host: postgresql-hl.postgresql.svc.cluster.local
  # -- External PostgreSQL username
  username: postgres
  # -- External PostgreSQL server port
  port: 5432
  # -- The name of the external PostgreSQL database. For more information: https://docs.n8n.io/hosting/configuration/supported-databases-settings/#required-permissions
  database: n8n
  # -- The name of an existing secret with PostgreSQL (must contain key `postgres-password`) and credentials.
  # When it's set, the `externalPostgresql.password` parameter is ignored
  existingSecret: postgresql-credentials

minio:
  enabled: false
